{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nazar\\\\Desktop\\\\\\u043F\\u043E\\u0440\\u0442\\u0444\\u043E\\u043B\\u0456\\u043E \\u043F\\u0440\\u043E\\u0441\\u0442\\u0438\\u0439 \\u0447\\u0430\\u0442\\\\chat\\\\src\\\\ChatList\\\\ChatList.js\";\nimport React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport styles from './Style';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport NotificationImportant from '@material-ui/icons/NotificationImportant';\n\nclass ChatListComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.userIsSender = chat => chat.messages[chat.messages.length - 1].sender === this.props.userEmail;\n\n    this.newChat = () => this.props.newChatBtnFn();\n\n    this.selectChat = index => this.props.selectChatFn(index);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n\n    if (this.props.chats.length > 0) {\n      return React.createElement(\"div\", {\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        fullWidth: true,\n        color: \"primary\",\n        onClick: this.newChat,\n        className: classes.newChatBtn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"New Message\"), React.createElement(List, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, this.props.chats.map((_chat, _index) => {\n        return React.createElement(\"div\", {\n          key: _index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, React.createElement(ListItem, {\n          onClick: () => this.selectChat(_index),\n          className: classes.listItem,\n          selected: this.props.selectedChatIndex === _index,\n          alignItems: \"flex-start\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, React.createElement(ListItemAvatar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, React.createElement(Avatar, {\n          alt: \"Remy Sharp\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, _chat.users.filter(_user => _user !== this.props.userEmail)[0].split('')[0])), React.createElement(ListItemText, {\n          primary: _chat.users.filter(_user => _user !== this.props.userEmail)[0],\n          secondary: React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            },\n            __self: this\n          }, React.createElement(Typography, {\n            component: \"span\",\n            color: \"textPrimary\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47\n            },\n            __self: this\n          }, _chat.messages[_chat.messages.length - 1].message.substring(0, 30) + ' ...')),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }), _chat.receiverHasRead === false && !this.userIsSender(_chat) ? React.createElement(ListItemIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, React.createElement(NotificationImportant, {\n          className: classes.unreadMessage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        })) : null), React.createElement(Divider, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }));\n      })));\n    } else {\n      return React.createElement(\"div\", {\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        fullWidth: true,\n        color: \"primary\",\n        onClick: this.newChat,\n        className: classes.newChatBtn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"\\u0417\"), React.createElement(List, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\n\nexport default withStyles(styles)(ChatListComponent);","map":{"version":3,"sources":["C:/Users/nazar/Desktop/портфоліо простий чат/chat/src/ChatList/ChatList.js"],"names":["React","withStyles","List","ListItem","ListItemText","ListItemAvatar","Avatar","Typography","styles","Divider","Button","ListItemIcon","NotificationImportant","ChatListComponent","Component","userIsSender","chat","messages","length","sender","props","userEmail","newChat","newChatBtnFn","selectChat","index","selectChatFn","render","classes","chats","root","newChatBtn","map","_chat","_index","listItem","selectedChatIndex","users","filter","_user","split","message","substring","receiverHasRead","unreadMessage"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport styles from './Style';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Button from '@material-ui/core/Button';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport NotificationImportant from '@material-ui/icons/NotificationImportant';\r\n\r\nclass ChatListComponent extends React.Component {\r\n\r\n  render() {\r\n\r\n    const { classes } = this.props;\r\n\r\n    if(this.props.chats.length > 0) {\r\n      return(\r\n        <div className={classes.root}>\r\n            <Button variant=\"contained\" \r\n              fullWidth \r\n              color='primary' \r\n              onClick={this.newChat} \r\n              className={classes.newChatBtn}>\r\n                New Message\r\n            </Button>\r\n            <List>\r\n              {\r\n                this.props.chats.map((_chat, _index) => {\r\n                  return (\r\n                    <div key={_index}>\r\n                      <ListItem onClick={() => this.selectChat(_index)} \r\n                        className={classes.listItem} \r\n                        selected={this.props.selectedChatIndex === _index} \r\n                        alignItems=\"flex-start\">\r\n                        <ListItemAvatar>\r\n                          <Avatar alt=\"Remy Sharp\">{_chat.users.filter(_user => _user !== this.props.userEmail)[0].split('')[0]}</Avatar>\r\n                        </ListItemAvatar>\r\n                        <ListItemText \r\n                          primary={_chat.users.filter(_user => _user !== this.props.userEmail)[0]}\r\n                          secondary={\r\n                            <React.Fragment>\r\n                              <Typography component='span'\r\n                                color='textPrimary'>\r\n                                  {_chat.messages[_chat.messages.length - 1].message.substring(0, 30) + ' ...'}\r\n                              </Typography>\r\n                            </React.Fragment>\r\n                          }/>\r\n                          {\r\n                            _chat.receiverHasRead === false && !this.userIsSender(_chat) ? \r\n                            <ListItemIcon><NotificationImportant className={classes.unreadMessage}></NotificationImportant></ListItemIcon> :\r\n                            null\r\n                          }\r\n                      </ListItem>\r\n                      <Divider/>\r\n                    </div>\r\n                  )\r\n                })\r\n              }\r\n            </List>\r\n        </div>\r\n      );\r\n    } else {\r\n      return(\r\n        <div className={classes.root}>\r\n          <Button variant=\"contained\" \r\n            fullWidth \r\n            color='primary' \r\n            onClick={this.newChat} \r\n            className={classes.newChatBtn}>\r\n              З\r\n          </Button>\r\n          <List></List>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  userIsSender = (chat) => chat.messages[chat.messages.length - 1].sender === this.props.userEmail;\r\n  newChat = () => this.props.newChatBtnFn();\r\n  selectChat = (index) => this.props.selectChatFn(index);\r\n}\r\n\r\nexport default withStyles(styles)(ChatListComponent);"]},"metadata":{},"sourceType":"module"}