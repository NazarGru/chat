{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nazar\\\\Desktop\\\\\\u043F\\u043E\\u0440\\u0442\\u0444\\u043E\\u043B\\u0456\\u043E \\u043F\\u0440\\u043E\\u0441\\u0442\\u0438\\u0439 \\u0447\\u0430\\u0442\\\\chat\\\\src\\\\Dashbord\\\\Dashbord.js\";\nimport React from 'react';\nimport ChatList from '../ChatList/ChatList';\nimport ChatView from '../ChatViev/Chatviev';\nimport ChatTextBox from '../ChatTextBox/ChatTextBox';\nimport styles from './Style';\nimport { Button, withStyles } from '@material-ui/core';\n\nconst firebase = require(\"firebase\");\n\nclass Dashbord extends React.Component {\n  constructor() {\n    super();\n\n    this.signOut = () => firebase.auth().signOut();\n\n    this.selectChat = chatIndex => {\n      this.setState({\n        selectedChat: chatIndex\n      });\n    };\n\n    this.submitMessage = msg => {\n      const docKey = this.buildDocKey(this.state.chats[this.state.selectedChat].users.filter(_usr => _usr !== this.state.email)[0]);\n      firebase.firestore().collection('chats').doc(docKey).update({\n        messages: firebase.firestore.FieldValue.arrayUnion({\n          sender: this.state.email,\n          message: msg,\n          timestap: Date.now()\n        }),\n        receiverHasRed: false\n      });\n    };\n\n    this.buildDocKey = friend => [this.state.email, friend].sort().join(':');\n\n    this.newChatBtnClicked = () => this.setState({\n      newChatFormVisible: true,\n      selectedChat: null\n    });\n\n    this.clicKedChatWhereNotSen = chatIndex => this.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length - 1].sender;\n\n    this.componentDidMount = () => {\n      firebase.auth().onAuthStateChanged(async _usr => {\n        if (!_usr) this.props.history.push('/login');else {\n          await firebase.firestore().collection('chats').where('users', 'array-contains', _usr.email).onSnapshot(async res => {\n            const chats = res.docs.map(_doc => _doc.data());\n            await this.setState({\n              email: _usr.email,\n              chats: chats\n            });\n            console.log(this.state);\n          });\n        }\n      });\n    };\n\n    this.state = {\n      selectedChat: null,\n      newChatFormVisible: false,\n      email: null,\n      chats: []\n    };\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(ChatList, {\n      history: this.props.history,\n      newChatBtnFunction: this.newChatBtnClicked,\n      selectChatFunction: this.selectChat,\n      chats: this.state.chats,\n      userEmail: this.state.email,\n      selectChatIndex: this.state.selectedChat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }), this.state.newChatFormVisible ? null : React.createElement(ChatView, {\n      user: this.state.email,\n      chat: this.state.chats[this.state.selectedChat],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), this.state.selectedChat !== null && !this.state.newChatFormVisible ? React.createElement(ChatTextBox, {\n      submitMessageFN: this.submitMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }) : null, React.createElement(Button, {\n      className: classes.signOutBtn,\n      onClick: this.signOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"\\u0412\\u0438\\u0439\\u0442\\u0438\"));\n  }\n\n}\n\nexport default withStyles(styles)(Dashbord);","map":{"version":3,"sources":["C:/Users/nazar/Desktop/портфоліо простий чат/chat/src/Dashbord/Dashbord.js"],"names":["React","ChatList","ChatView","ChatTextBox","styles","Button","withStyles","firebase","require","Dashbord","Component","constructor","signOut","auth","selectChat","chatIndex","setState","selectedChat","submitMessage","msg","docKey","buildDocKey","state","chats","users","filter","_usr","email","firestore","collection","doc","update","messages","FieldValue","arrayUnion","sender","message","timestap","Date","now","receiverHasRed","friend","sort","join","newChatBtnClicked","newChatFormVisible","clicKedChatWhereNotSen","length","componentDidMount","onAuthStateChanged","props","history","push","where","onSnapshot","res","docs","map","_doc","data","console","log","render","classes","signOutBtn"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ChatList from '../ChatList/ChatList';\r\nimport ChatView from '../ChatViev/Chatviev';\r\nimport ChatTextBox from '../ChatTextBox/ChatTextBox';\r\nimport styles from './Style';\r\nimport { Button, withStyles } from '@material-ui/core';\r\nconst firebase = require(\"firebase\");\r\n\r\nclass Dashbord extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state= {\r\n            selectedChat: null,\r\n            newChatFormVisible: false,\r\n            email: null,\r\n            chats: []\r\n        }\r\n    }\r\nrender(){\r\n    const { classes } = this.props;\r\nreturn(\r\n    <div>\r\n        <ChatList history={this.props.history}\r\n        newChatBtnFunction={this.newChatBtnClicked}\r\n        selectChatFunction={this.selectChat}\r\n        chats={this.state.chats}\r\n        userEmail = {this.state.email}\r\n        selectChatIndex={this.state.selectedChat} \r\n        ></ChatList>\r\n        {\r\n            this.state.newChatFormVisible ?\r\n            null :\r\n            <ChatView\r\n            user={this.state.email}\r\n            chat={this.state.chats[this.state.selectedChat]}\r\n            ></ChatView>\r\n        }\r\n        {\r\n            this.state.selectedChat !== null && ! this.state.newChatFormVisible ?\r\n            <ChatTextBox\r\n            submitMessageFN={this.submitMessage}\r\n            ></ChatTextBox> : null\r\n        }\r\n        \r\n        <Button className={classes.signOutBtn} onClick={this.signOut}>Вийти</Button>\r\n    </div>\r\n)\r\n}\r\nsignOut = () => firebase.auth().signOut();\r\nselectChat = (chatIndex) =>{\r\n    this.setState({selectedChat: chatIndex});\r\n}\r\nsubmitMessage = (msg) =>{\r\n    const docKey = this.buildDocKey(this.state.chats[this.state.selectedChat].users.filter(_usr => _usr !== this.state.email)[0]);\r\n    firebase\r\n    .firestore()\r\n    .collection('chats')\r\n    .doc(docKey)\r\n    .update({\r\n        messages: firebase.firestore.FieldValue.arrayUnion({\r\n           sender: this.state.email,\r\n           message:  msg,\r\n           timestap: Date.now()\r\n        }),\r\n        receiverHasRed: false\r\n    })\r\n}\r\n\r\nbuildDocKey = (friend) =>[this.state.email, friend].sort().join(':');\r\nnewChatBtnClicked = () => this.setState({newChatFormVisible: true, selectedChat: null});\r\nclicKedChatWhereNotSen = (chatIndex) => this.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length -1].sender\r\ncomponentDidMount = () =>{\r\n    firebase.auth().onAuthStateChanged(async _usr =>{\r\n        if(!_usr)\r\n        this.props.history.push('/login');\r\n        else{\r\n            await firebase\r\n            .firestore()\r\n            .collection('chats')\r\n            .where('users', 'array-contains', _usr.email)\r\n            .onSnapshot(async res =>{\r\n                const chats = res.docs.map(_doc => _doc.data());\r\n                await this.setState({\r\n                    email: _usr.email,\r\n                    chats: chats\r\n                });\r\n                console.log(this.state)\r\n            })\r\n        }\r\n    })\r\n}\r\n}\r\n\r\nexport default withStyles(styles)(Dashbord);"]},"metadata":{},"sourceType":"module"}