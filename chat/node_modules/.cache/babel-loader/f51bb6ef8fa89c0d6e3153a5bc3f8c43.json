{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nazar\\\\Desktop\\\\\\u043F\\u043E\\u0440\\u0442\\u0444\\u043E\\u043B\\u0456\\u043E \\u043F\\u0440\\u043E\\u0441\\u0442\\u0438\\u0439 \\u0447\\u0430\\u0442\\\\chat\\\\src\\\\NewChat\\\\NewChat.js\";\nimport React from 'react';\nimport { FormControl, InputLabel, Input, Button, Paper, withStyles, CssBaseline, Typography } from '@material-ui/core';\nimport styles from './Style';\n\nconst firebase = require(\"firebase\");\n\nclass NewChatComponent extends React.Component {\n  constructor() {\n    super();\n\n    this.userTyping = (inputType, e) => {\n      switch (inputType) {\n        case 'username':\n          this.setState({\n            username: e.target.value\n          });\n          break;\n\n        case 'message':\n          this.setState({\n            message: e.target.value\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.submitNewChat = async e => {\n      e.preventDefault();\n      const userExists = await this.userExists();\n\n      if (userExists) {\n        const chatExists = await this.chatExists();\n        chatExists ? this.goToChat() : this.createChat();\n      }\n    };\n\n    this.buildDocKey = () => [firebase.auth().currentUser.email, this.state.username].sort().join(':');\n\n    this.createChat = () => {\n      this.props.newChatSubmitFn({\n        sendTo: this.state.username,\n        message: this.state.message\n      });\n    };\n\n    this.goToChat = () => this.props.goToChatFn(this.buildDocKey(), this.state.message);\n\n    this.chatExists = async () => {\n      const docKey = this.buildDocKey();\n      const chat = await firebase.firestore().collection('chats').doc(docKey).get();\n      console.log(chat.exists);\n      return chat.exists;\n    };\n\n    this.userExists = async () => {\n      const usersSnapshot = await firebase.firestore().collection('users').get();\n      const exists = usersSnapshot.docs.map(_doc => _doc.data().email).includes(this.state.username);\n      this.setState({\n        serverError: !exists\n      });\n      return exists;\n    };\n\n    this.state = {\n      username: null,\n      message: null\n    };\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return React.createElement(\"main\", {\n      className: classes.main,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(CssBaseline, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }), React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      component: \"h1\",\n      variant: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"\\u0417\\u043D\\u0430\\u0439\\u0442\\u0438 \\u043A\\u043E\\u0440\\u0438\\u0441\\u0442\\u0443\\u0432\\u0430\\u0447\\u0430!\"), React.createElement(\"form\", {\n      className: classes.form,\n      onSubmit: e => this.submitNewChat(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(InputLabel, {\n      htmlFor: \"new-chat-username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"\\u0412\\u0432\\u0435\\u0434\\u0456\\u0442\\u044C \\u0435\\u043C\\u0430\\u0456\\u043B \\u043A\\u043E\\u0440\\u0438\\u0441\\u0442\\u0443\\u0432\\u0430\\u0447\\u0430\"), React.createElement(Input, {\n      required: true,\n      className: classes.input,\n      autoFocus: true,\n      onChange: e => this.userTyping('username', e),\n      id: \"new-chat-username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    })), React.createElement(FormControl, {\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(InputLabel, {\n      htmlFor: \"new-chat-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"\\u0412\\u0430\\u0448\\u0435 \\u043F\\u043E\\u0432\\u0456\\u0434\\u043E\\u043C\\u043B\\u0435\\u043D\\u043D\\u044F\"), React.createElement(Input, {\n      required: true,\n      className: classes.input,\n      onChange: e => this.userTyping('message', e),\n      id: \"new-chat-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    })), React.createElement(Button, {\n      fullWidth: true,\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.submit,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Send\")), this.state.serverError ? React.createElement(Typography, {\n      component: \"h5\",\n      variant: \"h6\",\n      className: classes.errorText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"\\u0442\\u0430\\u043A\\u043E\\u0433\\u043E \\u043A\\u043E\\u0440\\u0438\\u0441\") : null));\n  }\n\n  componentWillMount() {\n    if (!firebase.auth().currentUser) this.props.history.push('/login');\n  }\n\n}\n\nexport default withStyles(styles)(NewChatComponent);","map":{"version":3,"sources":["C:/Users/nazar/Desktop/портфоліо простий чат/chat/src/NewChat/NewChat.js"],"names":["React","FormControl","InputLabel","Input","Button","Paper","withStyles","CssBaseline","Typography","styles","firebase","require","NewChatComponent","Component","constructor","userTyping","inputType","e","setState","username","target","value","message","submitNewChat","preventDefault","userExists","chatExists","goToChat","createChat","buildDocKey","auth","currentUser","email","state","sort","join","props","newChatSubmitFn","sendTo","goToChatFn","docKey","chat","firestore","collection","doc","get","console","log","exists","usersSnapshot","docs","map","_doc","data","includes","serverError","render","classes","main","paper","form","input","submit","errorText","componentWillMount","history","push"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,KAAlC,EAAyCC,MAAzC,EAAiDC,KAAjD,EAAwDC,UAAxD,EAAoEC,WAApE,EAAiFC,UAAjF,QAAmG,mBAAnG;AACA,OAAOC,MAAP,MAAmB,SAAnB;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEA,MAAMC,gBAAN,SAA+BZ,KAAK,CAACa,SAArC,CAA+C;AAE7CC,EAAAA,WAAW,GAAG;AACZ;;AADY,SA0DdC,UA1Dc,GA0DD,CAACC,SAAD,EAAYC,CAAZ,KAAkB;AAC7B,cAAQD,SAAR;AACE,aAAK,UAAL;AACE,eAAKE,QAAL,CAAc;AAAEC,YAAAA,QAAQ,EAAEF,CAAC,CAACG,MAAF,CAASC;AAArB,WAAd;AACA;;AAEF,aAAK,SAAL;AACE,eAAKH,QAAL,CAAc;AAAEI,YAAAA,OAAO,EAAEL,CAAC,CAACG,MAAF,CAASC;AAApB,WAAd;AACA;;AAEF;AACE;AAVJ;AAYD,KAvEa;;AAAA,SAyEdE,aAzEc,GAyEE,MAAON,CAAP,IAAa;AAC3BA,MAAAA,CAAC,CAACO,cAAF;AACA,YAAMC,UAAU,GAAG,MAAM,KAAKA,UAAL,EAAzB;;AACA,UAAGA,UAAH,EAAe;AACb,cAAMC,UAAU,GAAG,MAAM,KAAKA,UAAL,EAAzB;AACAA,QAAAA,UAAU,GAAG,KAAKC,QAAL,EAAH,GAAqB,KAAKC,UAAL,EAA/B;AACD;AACF,KAhFa;;AAAA,SAkFdC,WAlFc,GAkFA,MAAM,CAACnB,QAAQ,CAACoB,IAAT,GAAgBC,WAAhB,CAA4BC,KAA7B,EAAoC,KAAKC,KAAL,CAAWd,QAA/C,EAAyDe,IAAzD,GAAgEC,IAAhE,CAAqE,GAArE,CAlFN;;AAAA,SAoFdP,UApFc,GAoFD,MAAM;AACjB,WAAKQ,KAAL,CAAWC,eAAX,CAA2B;AACzBC,QAAAA,MAAM,EAAE,KAAKL,KAAL,CAAWd,QADM;AAEzBG,QAAAA,OAAO,EAAE,KAAKW,KAAL,CAAWX;AAFK,OAA3B;AAID,KAzFa;;AAAA,SA2FdK,QA3Fc,GA2FH,MAAM,KAAKS,KAAL,CAAWG,UAAX,CAAsB,KAAKV,WAAL,EAAtB,EAA0C,KAAKI,KAAL,CAAWX,OAArD,CA3FH;;AAAA,SA6FdI,UA7Fc,GA6FD,YAAY;AACvB,YAAMc,MAAM,GAAG,KAAKX,WAAL,EAAf;AACA,YAAMY,IAAI,GAAG,MACX/B,QAAQ,CACPgC,SADD,GAECC,UAFD,CAEY,OAFZ,EAGCC,GAHD,CAGKJ,MAHL,EAICK,GAJD,EADF;AAMAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACO,MAAjB;AACA,aAAOP,IAAI,CAACO,MAAZ;AACD,KAvGa;;AAAA,SAwGdvB,UAxGc,GAwGD,YAAY;AACvB,YAAMwB,aAAa,GAAG,MACtBvC,QAAQ,CACLgC,SADH,GAEGC,UAFH,CAEc,OAFd,EAGGE,GAHH,EADA;AAKA,YAAMG,MAAM,GAAGC,aAAa,CACzBC,IADY,CAEVC,GAFU,CAENC,IAAI,IAAIA,IAAI,CAACC,IAAL,GAAYrB,KAFd,EAGVsB,QAHU,CAGD,KAAKrB,KAAL,CAAWd,QAHV,CAAf;AAIA,WAAKD,QAAL,CAAc;AAAEqC,QAAAA,WAAW,EAAE,CAACP;AAAhB,OAAd;AACA,aAAOA,MAAP;AACD,KApHa;;AAEZ,SAAKf,KAAL,GAAa;AACXd,MAAAA,QAAQ,EAAE,IADC;AAEXG,MAAAA,OAAO,EAAE;AAFE,KAAb;AAID;;AAEDkC,EAAAA,MAAM,GAAG;AAEP,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKrB,KAAzB;AAEA,WACE;AAAM,MAAA,SAAS,EAAEqB,OAAO,CAACC,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAED,OAAO,CAACE,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAC,IAAtB;AAA2B,MAAA,OAAO,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kHADF,EAEE;AAAM,MAAA,SAAS,EAAEF,OAAO,CAACG,IAAzB;AAA+B,MAAA,QAAQ,EAAG3C,CAAD,IAAO,KAAKM,aAAL,CAAmBN,CAAnB,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,WAAD;AAAa,MAAA,SAAS,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,mBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sJADF,EAIE,oBAAC,KAAD;AAAO,MAAA,QAAQ,MAAf;AACE,MAAA,SAAS,EAAEwC,OAAO,CAACI,KADrB;AAEE,MAAA,SAAS,MAFX;AAGE,MAAA,QAAQ,EAAG5C,CAAD,IAAO,KAAKF,UAAL,CAAgB,UAAhB,EAA4BE,CAA5B,CAHnB;AAIE,MAAA,EAAE,EAAC,mBAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF,EAYE,oBAAC,WAAD;AAAa,MAAA,SAAS,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,kBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2GADF,EAIE,oBAAC,KAAD;AAAO,MAAA,QAAQ,MAAf;AACE,MAAA,SAAS,EAAEwC,OAAO,CAACI,KADrB;AAEE,MAAA,QAAQ,EAAG5C,CAAD,IAAO,KAAKF,UAAL,CAAgB,SAAhB,EAA2BE,CAA3B,CAFnB;AAGE,MAAA,EAAE,EAAC,kBAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CAZF,EAsBE,oBAAC,MAAD;AAAQ,MAAA,SAAS,MAAjB;AAAkB,MAAA,OAAO,EAAC,WAA1B;AAAsC,MAAA,KAAK,EAAC,SAA5C;AAAsD,MAAA,SAAS,EAAEwC,OAAO,CAACK,MAAzE;AAAiF,MAAA,IAAI,EAAC,QAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBF,CAFF,EA2BI,KAAK7B,KAAL,CAAWsB,WAAX,GACA,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAC,IAAtB;AAA2B,MAAA,OAAO,EAAC,IAAnC;AAAwC,MAAA,SAAS,EAAEE,OAAO,CAACM,SAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6EADA,GAIA,IA/BJ,CAFF,CADF;AAuCD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,QAAG,CAACtD,QAAQ,CAACoB,IAAT,GAAgBC,WAApB,EACE,KAAKK,KAAL,CAAW6B,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH;;AA1D4C;;AAyH/C,eAAe5D,UAAU,CAACG,MAAD,CAAV,CAAmBG,gBAAnB,CAAf","sourcesContent":["import React from 'react';\r\nimport { FormControl, InputLabel, Input, Button, Paper, withStyles, CssBaseline, Typography } from '@material-ui/core';\r\nimport styles from './Style';\r\nconst firebase = require(\"firebase\");\r\n\r\nclass NewChatComponent extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      username: null,\r\n      message: null\r\n    };\r\n  }\r\n\r\n  render() {\r\n\r\n    const { classes } = this.props;\r\n\r\n    return(\r\n      <main className={classes.main}>\r\n        <CssBaseline/>\r\n        <Paper className={classes.paper}>\r\n          <Typography component=\"h1\" variant=\"h5\">Знайти користувача!</Typography>\r\n          <form className={classes.form} onSubmit={(e) => this.submitNewChat(e)}>\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor='new-chat-username'>\r\n                  Введіть емаіл користувача\r\n              </InputLabel>\r\n              <Input required \r\n                className={classes.input}\r\n                autoFocus \r\n                onChange={(e) => this.userTyping('username', e)} \r\n                id='new-chat-username'>\r\n              </Input>\r\n            </FormControl>\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor='new-chat-message'>\r\n                  Ваше повідомлення\r\n              </InputLabel>\r\n              <Input required \r\n                className={classes.input}\r\n                onChange={(e) => this.userTyping('message', e)} \r\n                id='new-chat-message'>\r\n              </Input>\r\n            </FormControl>\r\n            <Button fullWidth variant='contained' color='primary' className={classes.submit} type='submit'>Send</Button>\r\n          </form>\r\n          {\r\n            this.state.serverError ? \r\n            <Typography component='h5' variant='h6' className={classes.errorText}>\r\n              такого корис\r\n            </Typography> :\r\n            null\r\n          }\r\n        </Paper>\r\n      </main>\r\n    );\r\n  }\r\n\r\n  componentWillMount() {\r\n    if(!firebase.auth().currentUser)\r\n      this.props.history.push('/login');\r\n  }\r\n\r\n  userTyping = (inputType, e) => {\r\n    switch (inputType) {\r\n      case 'username':\r\n        this.setState({ username: e.target.value });\r\n        break;\r\n      \r\n      case 'message':\r\n        this.setState({ message: e.target.value });\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  submitNewChat = async (e) => {\r\n    e.preventDefault();\r\n    const userExists = await this.userExists();\r\n    if(userExists) {\r\n      const chatExists = await this.chatExists();\r\n      chatExists ? this.goToChat() : this.createChat();\r\n    }\r\n  }\r\n\r\n  buildDocKey = () => [firebase.auth().currentUser.email, this.state.username].sort().join(':');\r\n\r\n  createChat = () => {\r\n    this.props.newChatSubmitFn({\r\n      sendTo: this.state.username,\r\n      message: this.state.message\r\n    });\r\n  }\r\n\r\n  goToChat = () => this.props.goToChatFn(this.buildDocKey(), this.state.message);\r\n\r\n  chatExists = async () => {\r\n    const docKey = this.buildDocKey();\r\n    const chat = await \r\n      firebase\r\n      .firestore()\r\n      .collection('chats')\r\n      .doc(docKey)\r\n      .get();\r\n    console.log(chat.exists);\r\n    return chat.exists;\r\n  }\r\n  userExists = async () => {\r\n    const usersSnapshot = await \r\n    firebase\r\n      .firestore()\r\n      .collection('users')\r\n      .get();\r\n    const exists = usersSnapshot\r\n      .docs\r\n        .map(_doc => _doc.data().email)\r\n        .includes(this.state.username);\r\n    this.setState({ serverError: !exists });\r\n    return exists;\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(NewChatComponent);"]},"metadata":{},"sourceType":"module"}